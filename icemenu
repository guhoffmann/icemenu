#!/usr/bin/lua

local appname = "Icemenu 19.5.10"
local iconDirs = {
	"/usr/share/icons/gnome/32x32",
	"/usr/share/icons/hicolor/32x32", "/usr/share/icons/hicolor/48x48/",
	"/usr/share/icons/hicolor/64x64/", "/usr/share/icons/Mint-Y/apps/32/",
	"/usr/share/pixmaps", "/usr/share/games", "/usr/share/app-install/icons",
	"/usr/share/icons/Mint-X/apps/32/",	"/usr/share/icons/hicolor/scalable",
	"/usr/share/icewm/icons", "usr/share/icewm/icons/menuitems"
}
local iconTable = {}
local terminal = "x-terminal-emulator -e "
local par = arg[1]
local outfile

-- return table with lines of shell command output ----------------------------

function shellTable(command)
	local lines = {}
   local file = io.popen(command,"r")
	for line in file:lines() do
	   table.insert(lines,line)
	end
   file:close()
	return lines
end -- of shell(command)

-- merge 2 tables -------------------------------------------------------------

function table.merge(t1, t2)
   for k,v in ipairs(t2) do
      table.insert(t1, v)
   end
   return t1
end

-- test if file exists --------------------------------------------------------

function fileExists(name)
   local f = io.open(name,"r")
   if f ~= nil then io.close(f) return true else return false end
end

-- read all icons into table --------------------------------------------------

function readIcons()
	for i,v in ipairs(iconDirs) do
		table.merge(iconTable, shellTable("find "..v.." -name *.png"))
		table.merge(iconTable, shellTable("find "..v.." -name *.xpm"))
		table.merge(iconTable, shellTable("find "..v.." -name *.svg"))
	end -- of for i,v ...
end

-- find an icon ---------------------------------------------------------------

function findIcon(iconName)
	if iconName ~= nil then 
		-- first: test if icon given with full url can be found
		if fileExists(iconName) and string.match(iconName,".png") then
			return iconName
		-- if not found then search in iconTable for icon
		else
			for i,v in ipairs(iconTable) do
				if string.find(v,iconName,1,true) and string.match(v,".png") then
				return v end
			end
		end
	end
	-- return this if nothing is found!
	return " /usr/share/icons/gnome/32x32/actions/gnome-run.png "
end

-- search appTable for line containing expression -----------------------------

function lineSearch( searchTable, searchString)
	local val
	for i,v in ipairs(searchTable) do
		val = string.match(v, searchString)
		if val ~= nil then return val end
	end
	return "nix"
end

--[[ check string for different strings separated by | --------------------------
	if not all are present, return "false", this gives logical "and"! ]]

function checkString(stringVal, compVal)
	for v in string.gmatch(compVal,"%S+") do
		if string.match(stringVal,v) ~= nil then
			return true
		end
	end
	return false
end

-- search items for menu ------------------------------------------------------

function menuItems(appTable, categories)

	-- iterate over apps table

	for i,appEntry in ipairs(appTable) do

		local categoryEntry = lineSearch(appEntry,"Categories=.*$")
	--	outfile:write("***"..categoryEntry.."***"..categories.."***"..lineSearch(appEntry,"Exec=.*$") )
		if checkString(categoryEntry, categories) then

			local name = lineSearch(appEntry,"Name.de.=.*$")
			if name == "nix" then
				name = lineSearch(appEntry, "Name=.*$" )
			end
			name = string.match(name,"=(.*)")
			local comment
			-- read comment if parameter -c or c is given only!
			if par == "c" or par == "-c" then
				comment = lineSearch(appEntry,"Comment.de.=.*$")
				if comment == "nix" then
					comment = lineSearch(appEntry, "Comment=.*$" )
				end
				if comment == "nix" then comment = ""
				else	comment = " - "..string.match(comment,"=(.*)")
				end
			else comment = ""
			end
			local exec = lineSearch(appEntry, "Exec=.*$") 
			exec = string.match(exec, "Exec=(.*)")
			exec = exec:gsub("%%.","")
			local icon = lineSearch(appEntry, "Icon=.*$")
			local terminalTrue = lineSearch(appEntry, "Terminal=.*$")
			local iconFound = findIcon(string.match(icon, "Icon=(.*)"))
			if terminalTrue == "Terminal=true" then
				outfile:write("   prog \""..name..comment.."\" "..iconFound.." "..terminal.." "..exec.."\n")
			else
				outfile:write("   prog \""..name..comment.."\" "..iconFound.." "..exec.."\n")
			end

		end -- of if checkString ...
	end -- of for i,app ...

end

function menuStart(menuTitle, menuIcon)
	outfile:write("menu \""..menuTitle.."\" "..findIcon(menuIcon).." {\n")
end

-- main part ------------------------------------------------------------------

io.stderr:write("Starting...")
outfile=io.output(arg[1])

local apps = {}
for i,v in ipairs(shellTable("ls /usr/share/applications/*.desktop")) do
	table.insert(apps, shellTable("cat "..v))
end

readIcons()

-- Menu Beenden
outfile:write("menu \"Beenden...\" "..findIcon("exit.png").."  {\n")
outfile:write("	prog \"Abmelden\" "..findIcon("gnome-logout.png").." yesno \"Wirklich Benutzer abmelden?\" \"killall uweicewm-session\"\n")
outfile:write("	prog \"Neustart\" "..findIcon("reload.png").." yesno \"Wirklich Rechner neu starten?\" \"/sbin/reboot\"\n")
outfile:write("	prog \"Ausschalten\" "..findIcon("gnome-shutdown.png").." yesno \"Wirklich Rechner runterfahren?\" \"/sbin/shutdown now\"\n")
-- Puppy specific!!
outfile:write("	prog \"Neustart\" "..findIcon("reload").." /sbin/reboot\n")
outfile:write("	prog \"Ausschalten\" "..findIcon("gnome-shutdown.png").." /sbin/poweroff\n")
outfile:write("}\n")
outfile:write("separator\n")
outfile:write("prog \"Terminal\" "..findIcon("konsole.png").." lxterminal\n");--io.stderr:write("Gefunden: "..findIcon("reload"))
outfile:write("prog \"Appfinder\" "..findIcon("edit-find").." xfce4-appfinder\n")
outfile:write("prog \"Menü aktualisieren\" "..findIcon("view-refresh").." icemenu \"/root/.icewm/menu\"")
outfile:write("separator\n")

-- Entwicklung
menuStart("Entwicklung", "package_development")
	menuItems(apps, "Development")
outfile:write("}\n")

-- Grafik
menuStart("Grafik", "package_graphics")
	menuItems(apps, "Graphics X-GraphicUtility")
outfile:write("}\n")

-- Spiele
menuStart("Spiele", "package_games")
	menuItems(apps, "Game")
outfile:write("}\n")

-- Multimedia/Audio/Video
menuStart("Multimedia", "package_multimedia")
	menuItems(apps, "AudioVideo Video Audio")
outfile:write("}\n")

-- Office
menuStart("Büro", "package_office")
	menuItems(apps, "Office")
outfile:write("}\n")

-- Wissenschaft
menuStart("Wissenschaft", "applications-science")
	menuItems(apps, "Science")
outfile:write("}\n")

-- Erziehung
menuStart("Erziehung", "applications-education")
	menuItems(apps, "Science")
outfile:write("}\n")

-- Netzwerk
menuStart("Netzwerk", "nm-device-wireless")
	menuItems(apps, "Network WebBrowser X-Internet")
outfile:write("}\n")

-- Einstellungen
menuStart("Einstellungen", "preferences-other")
	menuStart("Desktop", "preferences-desktop-personal")
		menuItems(apps, "DesktopSettings")
	outfile:write("}\n")
	menuStart("Hardware", "preferences-desktop-peripherals")
		menuItems(apps, "HardwareSettings")
	outfile:write("}\n")
	menuStart("Alle", "preferences-other")
		menuItems(apps, "Settings X%-Setup%-puppy")
	outfile:write("}\n")
outfile:write("}\n")

-- System
menuStart("System", "preferences-system-network")
	outfile:write("prog \"Midnight-Commander\" "..findIcon("MidnightCommander").." x-terminal-emulator -e mc\n")
	outfile:write("prog \"Pcmanfm-Dateimanager\" "..findIcon("system-file-manager").." pcmanfm\n")
	outfile:write("prog \"Thunar-Dateimanager\" "..findIcon("thunar").." thunar\n")
	outfile:write("prog \"Druckerkonfiguration\" "..findIcon("printer").." system-config-printer\n")

	outfile:write("separator\n")
	outfile:write("prog \"Sofware-Manager\" "..findIcon("mintinstall").." mintinstall\n")
	outfile:write("prog \"Update-Manager\" "..findIcon("mintupdate").." mintupdate\n")
	outfile:write("prog \"Synaptic-Paketmanager\" "..findIcon("synaptic").." synaptic-pkexec\n")
	outfile:write("separator\n")
	menuStart("Dateisystem", "drive-multidisk")
		menuItems(apps, "Filesystem")	
		menuItems(apps, "FileTools")
--		menuItems(apps, "FileManager")
	outfile:write("}\n")

	menuStart("Sicherheit/Monitoring", "security-high")
		menuItems(apps, "Monitor")
		menuItems(apps, "Security")
	outfile:write("}\n")

	menuStart("Terminals", "konsole")
		menuItems(apps, "TerminalEmulator X%-Utility%-shell")
	outfile:write("}\n")
	menuStart("Alle", "preferences-system-network")
		menuItems(apps, "System")
	outfile:write("}\n")
outfile:write("}\n")

-- Werkzeuge
menuStart("Werkzeuge", "gnome-util")
	menuItems(apps, "Accessiblility")
	menuItems(apps, "Archiving")
	menuItems(apps, "Calculator")
	menuItems(apps, "Clock")
	menuItems(apps, "TextEditor")
	menuItems(apps, "TextTools")
	menuStart("Alle", "gnome-util")
		menuItems(apps, "Utility")
	outfile:write("}\n")
outfile:write("}\n")

--for i,v in ipairs(iconTable) do
--	io.stderr:write(v)
--end

io.stderr:write("Finished!")
outfile.close()

