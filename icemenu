#!/usr/bin/lua

local appname = "Icemenu 19.6.20-1"
local iconDirs = {
	"/usr/share/icons/gnome/32x32",
	"/usr/share/icons/hicolor/32x32", "/usr/share/icons/hicolor/48x48/",
	"/usr/share/icons/hicolor", "/usr/share/icons/Mint-Y/apps/32/",
	"/usr/share/pixmaps", "/usr/share/games", "/usr/share/app-install/icons",
	"/usr/share/icons/Mint-X/apps/32/",	"/usr/share/icons/hicolor/scalable",
	"/usr/share/icewm/icons", "usr/share/icewm/icons/menuitems"
}
local rootBase="" -- Base dir for icon search
local iconTable = {}
local terminal = "x-terminal-emulator -e "
local par
local appsdir = "/usr/share/applications"

-- parse command line ---------------------------------------------------------

function parseCmdLine()
	-- print help if selected
	if arg[1] == "-h" or arg[1] == "h" or arg[1] == "--help" then
		print("\n"..appname.." - Creates an icewm menu file!\n")
		print([[usage: icemenu [options] [appsDir]
Available options are:
-c show       short comment line after program name in menu
-r directory  root directory for icon and application search
-h show       help page

[appsDir] ist the directory where to search application desktop files, defaults to /usr/share/applications.
If option '-r' is given, applications and icons are searched in a directory tree starting at the given directory.
Examples:
icemenu             search applications in '/usr/share/applications', icons in '/usr/share/icons'.
icemenu -r rootfs   search applications in 'rootfs/usr/share/applications', icons in 'rootfs/usr/share/icons'.
icemenu -c          search applications/icons in default dirs, add short comment to program title.

Output is done to stdout. To create a menu file, redirect output! (e.g. "icemenu >~/.icewm/menu")
]])
		os.exit()
	end

	local i = 1
	while i <= #arg do
		if arg[i] == "-c" or arg[i] == "c" then
			par = arg[i]
		elseif arg[i] == "-r" or arg[i] == "r" then
			rootBase = arg[i+1]
			i = i + 1
		else appsdir = arg[i]
		end
		i = i + 1
	end
end -- of parseCmdLine

-- return table with lines of shell command output ----------------------------

function shellTable(command)
	local lines = {}
   local file = io.popen(command,"r")
	for line in file:lines() do
	   table.insert(lines,line)
	end
   file:close()
	return lines
end -- of shell(command)

-- merge 2 tables -------------------------------------------------------------

function table.merge(t1, t2)
   for k,v in ipairs(t2) do
      table.insert(t1, v)
   end
   return t1
end

-- test if file exists --------------------------------------------------------

function fileExists(name)
   local f = io.open(name,"r")
   if f ~= nil then io.close(f) return true else return false end
end

-- read all icons into table --------------------------------------------------

function readIcons()
	for i,v in ipairs(iconDirs) do
		table.merge(iconTable,
			--[[ must cd to 'rootBase' first to get all icons, 'cause 'find' wouldn't get
			all icons sometimes. Dunno the exact reason...]]
			shellTable("AKTDIR=$(pwd); cd "..rootBase.."; find "..v.." -name *.png -o -name *.xpm -o -name *.svg; cd $AKTDIR"))
	end -- of for i,v ...
end

-- find an icon ---------------------------------------------------------------

function findIcon(iconName)
	if iconName ~= nil then 
		-- first: test if icon given with full url can be found
		if fileExists(iconName) then
			if string.match(iconName,".svg") then
				return iconName..".png"
				else return iconName
			end
		-- if not found then search in iconTable for icon
		else
		-- if not found then search in iconTable for icon
			for i,v in ipairs(iconTable) do
				-- activate/deactivate the corresponing lines if you also want SVG icons to be found!!!
				if string.find(v,iconName,1,true) and (string.match(v,".png") or string.match(v,".xpm"))then
				--if string.find(v,iconName,1,true) and (string.match(v,".png") or string.match(v,".xpm") or string.match(v,".svg")) then
				return v:match("[^("..rootBase:gsub("-","%%-")..")].*") end
			end
		end
	end
	-- return this if nothing is found!
	return "/usr/share/icons/gnome/32x32/actions/gnome-run.png "
end

-- search appTable for line containing expression -----------------------------

function lineSearch( searchTable, searchString)
	local val
	for i,v in ipairs(searchTable) do
		val = string.match(v, searchString)
		if val ~= nil then return val end
	end
	return "nix"
end

--[[ check string for different strings separated by | --------------------------
	if not all are present, return "false", this gives logical "and"! ]]

function checkString(stringVal, compVal)
	for v in string.gmatch(compVal,"%S+") do
		if string.match(stringVal,v) ~= nil then
			return true
		end
	end
	return false
end

-- search items for menu ------------------------------------------------------

function menuItems(appTable, categories)

	-- iterate over apps table

	for i,appEntry in ipairs(appTable) do

		local categoryEntry = lineSearch(appEntry,"Categories=.*$")
	--	print("***"..categoryEntry.."***"..categories.."***"..lineSearch(appEntry,"Exec=.*$") )
		if checkString(categoryEntry, categories) then

			local name = lineSearch(appEntry,"Name.de.=.*$")
			if name == "nix" then
				name = lineSearch(appEntry, "Name=.*$" )
			end
			name = string.match(name,"=(.*)")
			local comment
			-- read comment if parameter -c or c is given only!
			if par == "c" or par == "-c" then
				comment = lineSearch(appEntry,"Comment.de.=.*$")
				if comment == "nix" then
					comment = lineSearch(appEntry, "Comment=.*$" )
				end
				if comment == "nix" then comment = ""
				else	comment = " - "..string.match(comment,"=(.*)")
				end
			else comment = ""
			end
			local exec = lineSearch(appEntry, "Exec=.*$") 
			exec = string.match(exec, "Exec=(.*)")
			exec = exec:gsub("%%.","")
			local icon = lineSearch(appEntry, "Icon=.*$")
			local terminalTrue = lineSearch(appEntry, "Terminal=.*$")
			local iconFound = findIcon(string.match(icon, "Icon=(.*)"))
			if terminalTrue == "Terminal=true" then
				print("   prog \""..name..comment.."\" "..iconFound.." "..terminal.." "..exec)
			else
				--print(rootBase, name, iconFound, iconFound:match("[^("..rootBase:gsub("-","%%-")..")].*"), exec)
				print("   prog \""..name..comment.."\" "..iconFound.." "..exec)
			end

		end -- of if checkString ...
	end -- of for i,app ...

end

function menuStart(menuTitle, menuIcon)
	print("menu \""..menuTitle.."\" "..findIcon(menuIcon).." {")
end
-- main part ------------------------------------------------------------------

local apps = {}

parseCmdLine()

for i,v in ipairs(shellTable("ls "..rootBase..appsdir.."/*.desktop")) do
	table.insert(apps, shellTable("cat "..v))
end

readIcons()

-- Menu Beenden
print("menu \"Beenden...\" "..findIcon("exit.png").."  {")
print("	prog \"Abmelden\" "..findIcon("gnome-logout.png").." yesno \"Wirklich Benutzer abmelden?\" \"killall uweicewm-session\"")
if fileExists("/sbin/reboot") then 
	print("	prog \"Neustart\" "..findIcon("reload.png").." yesno \"Wirklich Rechner neu starten?\" \"/sbin/reboot\"")
end
if fileExists("/sbin/poweroff") then 
	print("	prog \"Ausschalten\" "..findIcon("gnome-shutdown.png").." yesno \"Wirklich ausschalten?\" \"/sbin/poweroff\"")
else
	print("	prog \"Ausschalten\" "..findIcon("gnome-shutdown.png").." yesno \"Wirklich ausschalten?\" \"/sbin/shutdown now\"")
end
print("}")
print("separator")
print("prog \"Terminal\" "..findIcon("konsole.png").." lxterminal");--io.stderr:write("Gefunden: "..findIcon("reload"))
print("prog \"Appfinder\" "..findIcon("edit-find").." xfce4-appfinder")
print("prog \"Menü aktualisieren\" "..findIcon("view-refresh").." x-terminal-emulator -e \"icemenu -c >~/.icewm/menu\"")
print("separator")

-- Entwicklung
menuStart("Entwicklung", "package_development")
	menuItems(apps, "Development")
print("}")

-- Grafik
menuStart("Grafik", "package_graphics")
	menuItems(apps, "Graphics X-GraphicUtility")
print("}")

-- Spiele
menuStart("Spiele", "package_games")
	menuItems(apps, "Game")
print("}")

-- Multimedia/Audio/Video
menuStart("Multimedia", "package_multimedia")
	menuItems(apps, "AudioVideo Video Audio")
print("}")

-- Office
menuStart("Büro", "package_office")
	menuItems(apps, "Office")
print("}")

-- Wissenschaft
menuStart("Wissenschaft", "applications-science")
	menuItems(apps, "Science")
print("}")

-- Erziehung
menuStart("Erziehung", "applications-education")
	menuItems(apps, "Science")
print("}")

-- Netzwerk
menuStart("Netzwerk", "nm-device-wireless")
	menuItems(apps, "Network WebBrowser X%-Internet")
print("}")

-- Einstellungen
menuStart("Einstellungen", "preferences-other")
	menuStart("Desktop", "preferences-desktop-personal")
		menuItems(apps, "DesktopSettings")
	print("}")
	menuStart("Hardware", "preferences-desktop-peripherals")
		menuItems(apps, "HardwareSettings")
	print("}")
	menuStart("Alle", "preferences-other")
		menuItems(apps, "Settings X%-Setup%-puppy")
	print("}")
print("}")

-- System
menuStart("System", "preferences-system-network")
	print("prog \"Midnight-Commander\" "..findIcon("MidnightCommander").." x-terminal-emulator -e mc")
	print("prog \"Pcmanfm-Dateimanager\" "..findIcon("system-file-manager").." pcmanfm")
	print("prog \"Thunar-Dateimanager\" "..findIcon("thunar").." thunar")
	print("prog \"Druckerkonfiguration\" "..findIcon("printer").." system-config-printer")

	print("separator")
	print("prog \"Sofware-Manager\" "..findIcon("mintinstall").." mintinstall")
	print("prog \"Update-Manager\" "..findIcon("mintupdate").." mintupdate")
	print("prog \"Synaptic-Paketmanager\" "..findIcon("synaptic").." synaptic-pkexec")
	print("separator")
	menuStart("Dateisystem", "drive-multidisk")
		menuItems(apps, "Filesystem FileTools FileManager")
	print("}")

	menuStart("Sicherheit/Monitoring", "security-high")
		menuItems(apps, "Monitor Security")
	print("}")

	menuStart("Terminals", "konsole")
		menuItems(apps, "TerminalEmulator X%-Utility%-shell")
	print("}")
	menuStart("Alle", "preferences-system-network")
		menuItems(apps, "System")
	print("}")
print("}")

-- Werkzeuge
menuStart("Werkzeuge", "gnome-util")
	menuItems(apps, "Accessiblility Archiving Calculator Clock TextEditor TextTools")
	menuStart("Alle", "gnome-util")
		menuItems(apps, "Utility")
	print("}")
print("}")

